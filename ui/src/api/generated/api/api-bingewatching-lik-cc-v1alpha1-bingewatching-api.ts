/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Attachment } from '../models';
// @ts-ignore
import type { HandsomeMovie } from '../models';
// @ts-ignore
import type { HandsomeMovieList } from '../models';
/**
 * ApiBingewatchingLikCcV1alpha1BingewatchingApi - axios parameter creator
 * @export
 */
export const ApiBingewatchingLikCcV1alpha1BingewatchingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据名称获取电影
         * @param {string} name 电影名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getMovieByName', 'name', name)
            const localVarPath = `/apis/api.bingewatching.lik.cc/v1alpha1/movies/-/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 批量插入影视记录
         * @param {Array<HandsomeMovie>} handsomeMovie 影视记录列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertMovies: async (handsomeMovie: Array<HandsomeMovie>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'handsomeMovie' is not null or undefined
            assertParamExists('insertMovies', 'handsomeMovie', handsomeMovie)
            const localVarPath = `/apis/api.bingewatching.lik.cc/v1alpha1/movies/insert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(handsomeMovie, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 分页查询
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] timeline filtered by keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovies: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/api.bingewatching.lik.cc/v1alpha1/movies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 手动同步电影集数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMovies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/api.bingewatching.lik.cc/v1alpha1/movies/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 转存附件
         * @param {string} picUrl 图片URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttachment: async (picUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'picUrl' is not null or undefined
            assertParamExists('updateAttachment', 'picUrl', picUrl)
            const localVarPath = `/apis/api.bingewatching.lik.cc/v1alpha1/movies/attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (picUrl !== undefined) {
                localVarQueryParameter['picUrl'] = picUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiBingewatchingLikCcV1alpha1BingewatchingApi - functional programming interface
 * @export
 */
export const ApiBingewatchingLikCcV1alpha1BingewatchingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiBingewatchingLikCcV1alpha1BingewatchingApiAxiosParamCreator(configuration)
    return {
        /**
         * 根据名称获取电影
         * @param {string} name 电影名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMovieByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMovieByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiBingewatchingLikCcV1alpha1BingewatchingApi.getMovieByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 批量插入影视记录
         * @param {Array<HandsomeMovie>} handsomeMovie 影视记录列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertMovies(handsomeMovie: Array<HandsomeMovie>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertMovies(handsomeMovie, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiBingewatchingLikCcV1alpha1BingewatchingApi.insertMovies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 分页查询
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] timeline filtered by keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMovies(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandsomeMovieList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMovies(page, size, labelSelector, fieldSelector, sort, keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiBingewatchingLikCcV1alpha1BingewatchingApi.listMovies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 手动同步电影集数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncMovies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncMovies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiBingewatchingLikCcV1alpha1BingewatchingApi.syncMovies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 转存附件
         * @param {string} picUrl 图片URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttachment(picUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttachment(picUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiBingewatchingLikCcV1alpha1BingewatchingApi.updateAttachment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiBingewatchingLikCcV1alpha1BingewatchingApi - factory interface
 * @export
 */
export const ApiBingewatchingLikCcV1alpha1BingewatchingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiBingewatchingLikCcV1alpha1BingewatchingApiFp(configuration)
    return {
        /**
         * 根据名称获取电影
         * @param {ApiBingewatchingLikCcV1alpha1BingewatchingApiGetMovieByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieByName(requestParameters: ApiBingewatchingLikCcV1alpha1BingewatchingApiGetMovieByNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMovieByName(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 批量插入影视记录
         * @param {ApiBingewatchingLikCcV1alpha1BingewatchingApiInsertMoviesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertMovies(requestParameters: ApiBingewatchingLikCcV1alpha1BingewatchingApiInsertMoviesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.insertMovies(requestParameters.handsomeMovie, options).then((request) => request(axios, basePath));
        },
        /**
         * 分页查询
         * @param {ApiBingewatchingLikCcV1alpha1BingewatchingApiListMoviesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovies(requestParameters: ApiBingewatchingLikCcV1alpha1BingewatchingApiListMoviesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<HandsomeMovieList> {
            return localVarFp.listMovies(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 手动同步电影集数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMovies(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncMovies(options).then((request) => request(axios, basePath));
        },
        /**
         * 转存附件
         * @param {ApiBingewatchingLikCcV1alpha1BingewatchingApiUpdateAttachmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttachment(requestParameters: ApiBingewatchingLikCcV1alpha1BingewatchingApiUpdateAttachmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachment> {
            return localVarFp.updateAttachment(requestParameters.picUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMovieByName operation in ApiBingewatchingLikCcV1alpha1BingewatchingApi.
 * @export
 * @interface ApiBingewatchingLikCcV1alpha1BingewatchingApiGetMovieByNameRequest
 */
export interface ApiBingewatchingLikCcV1alpha1BingewatchingApiGetMovieByNameRequest {
    /**
     * 电影名称
     * @type {string}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiGetMovieByName
     */
    readonly name: string
}

/**
 * Request parameters for insertMovies operation in ApiBingewatchingLikCcV1alpha1BingewatchingApi.
 * @export
 * @interface ApiBingewatchingLikCcV1alpha1BingewatchingApiInsertMoviesRequest
 */
export interface ApiBingewatchingLikCcV1alpha1BingewatchingApiInsertMoviesRequest {
    /**
     * 影视记录列表
     * @type {Array<HandsomeMovie>}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiInsertMovies
     */
    readonly handsomeMovie: Array<HandsomeMovie>
}

/**
 * Request parameters for listMovies operation in ApiBingewatchingLikCcV1alpha1BingewatchingApi.
 * @export
 * @interface ApiBingewatchingLikCcV1alpha1BingewatchingApiListMoviesRequest
 */
export interface ApiBingewatchingLikCcV1alpha1BingewatchingApiListMoviesRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiListMovies
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiListMovies
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiListMovies
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiListMovies
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiListMovies
     */
    readonly sort?: Array<string>

    /**
     * timeline filtered by keyword.
     * @type {string}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiListMovies
     */
    readonly keyword?: string
}

/**
 * Request parameters for updateAttachment operation in ApiBingewatchingLikCcV1alpha1BingewatchingApi.
 * @export
 * @interface ApiBingewatchingLikCcV1alpha1BingewatchingApiUpdateAttachmentRequest
 */
export interface ApiBingewatchingLikCcV1alpha1BingewatchingApiUpdateAttachmentRequest {
    /**
     * 图片URL
     * @type {string}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApiUpdateAttachment
     */
    readonly picUrl: string
}

/**
 * ApiBingewatchingLikCcV1alpha1BingewatchingApi - object-oriented interface
 * @export
 * @class ApiBingewatchingLikCcV1alpha1BingewatchingApi
 * @extends {BaseAPI}
 */
export class ApiBingewatchingLikCcV1alpha1BingewatchingApi extends BaseAPI {
    /**
     * 根据名称获取电影
     * @param {ApiBingewatchingLikCcV1alpha1BingewatchingApiGetMovieByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApi
     */
    public getMovieByName(requestParameters: ApiBingewatchingLikCcV1alpha1BingewatchingApiGetMovieByNameRequest, options?: RawAxiosRequestConfig) {
        return ApiBingewatchingLikCcV1alpha1BingewatchingApiFp(this.configuration).getMovieByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 批量插入影视记录
     * @param {ApiBingewatchingLikCcV1alpha1BingewatchingApiInsertMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApi
     */
    public insertMovies(requestParameters: ApiBingewatchingLikCcV1alpha1BingewatchingApiInsertMoviesRequest, options?: RawAxiosRequestConfig) {
        return ApiBingewatchingLikCcV1alpha1BingewatchingApiFp(this.configuration).insertMovies(requestParameters.handsomeMovie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 分页查询
     * @param {ApiBingewatchingLikCcV1alpha1BingewatchingApiListMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApi
     */
    public listMovies(requestParameters: ApiBingewatchingLikCcV1alpha1BingewatchingApiListMoviesRequest = {}, options?: RawAxiosRequestConfig) {
        return ApiBingewatchingLikCcV1alpha1BingewatchingApiFp(this.configuration).listMovies(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 手动同步电影集数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApi
     */
    public syncMovies(options?: RawAxiosRequestConfig) {
        return ApiBingewatchingLikCcV1alpha1BingewatchingApiFp(this.configuration).syncMovies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 转存附件
     * @param {ApiBingewatchingLikCcV1alpha1BingewatchingApiUpdateAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiBingewatchingLikCcV1alpha1BingewatchingApi
     */
    public updateAttachment(requestParameters: ApiBingewatchingLikCcV1alpha1BingewatchingApiUpdateAttachmentRequest, options?: RawAxiosRequestConfig) {
        return ApiBingewatchingLikCcV1alpha1BingewatchingApiFp(this.configuration).updateAttachment(requestParameters.picUrl, options).then((request) => request(this.axios, this.basePath));
    }
}

